(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Jsi = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(e){return void 0===e?"undefined":_typeof2(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":_typeof2(e)},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),Jsi=function(){function e(t){_classCallCheck(this,e),void 0===t&&(t=document),this.doc=t,this.created=new Map,this.eltEvent=new Map,this.eltEvent.set("onclick","click"),this.eltEvent.set("onchange","change"),this.eltEvent.set("onfocus","focus"),this.eltEvent.set("onblur","blur"),this.eltEvent.set("onkeyup","keyup"),this.eltEvent.set("onkeypress","keypress"),this.eltEvent.set("onsubmit","submit"),this.eltEvent.set("onanimationend","animationend"),this.eltEvent.set("ontransitionend","transitionend"),this.eltEvent.set("oncopy","copy"),this.eltEvent.set("oncut","cut"),this.eltEvent.set("ondblclick","dblclick"),this.eltEvent.set("oninvalid","invalid"),this.eltEvent.set("onmousedown","mousedown"),this.eltEvent.set("onmouseup","mouseup"),this.eltEvent.set("onmouseenter","mouseenter"),this.eltEvent.set("onmouseleave","mouseleave"),this.eltEvent.set("onmousemove","mousemove"),this.eltEvent.set("onmouseout","mouseout"),this.eltEvent.set("onmouseover","mouseover"),this.eltEvent.set("onpaste","paste"),this.eltEvent.set("onresize","resize"),this.eltEvent.set("onscroll","scroll"),this.eltEvent.set("onselect","select"),this.eltEvent.set("ontouchstart","touchstart"),this.eltEvent.set("ontouchmove","touchmove"),this.eltEvent.set("ontouchend","touchend"),this.eltEvent.set("ondrag","drag"),this.eltEvent.set("ondragend","dragend"),this.eltEvent.set("ondragenter","dragenter"),this.eltEvent.set("ondragleave","dragleave"),this.eltEvent.set("ondragover","dragover"),this.eltEvent.set("ondragstart","dragstart"),this.eltEvent.set("ondrop","drop"),this.eltEvent.set("oninput","input"),this.eltEvent.set("onloadstart","loadstart"),this.eltEvent.set("onprogress","progress"),this.eltEvent.set("onsuspend","suspend"),this.eltEvent.set("onabort","abort"),this.eltEvent.set("onerror","error"),this.eltEvent.set("onemptied","emptied"),this.eltEvent.set("onstalled","stalled"),this.eltEvent.set("onloadedmetadata","loadedmetadata"),this.eltEvent.set("onloadeddata","loadeddata"),this.eltEvent.set("oncanplay","canplay"),this.eltEvent.set("oncanplaythrough","canplaythrough"),this.eltEvent.set("onplaying","playing"),this.eltEvent.set("onwaiting","waiting"),this.eltEvent.set("onseeking","seeking"),this.eltEvent.set("onseeked","seeked"),this.eltEvent.set("onended","ended"),this.eltEvent.set("ondurationchange","durationchange"),this.eltEvent.set("ontimeupdate","timeupdate"),this.eltEvent.set("onplay","play"),this.eltEvent.set("onpause","pause"),this.eltEvent.set("onratechange","ratechange"),this.eltEvent.set("onresize","resize"),this.eltEvent.set("onvolumechange","volumechange")}return _createClass(e,[{key:"id",value:function(e){return this.doc.getElementById(e)}},{key:"query",value:function(e){var t=this.doc.querySelectorAll(e);return t.length>0?t:null}},{key:"queryFirst",value:function(e){return this.doc.querySelector(e)}},{key:"select",value:function(e){var t=this.id(e);return null===t&&(t=this.queryFirst(e)),t}},{key:"append",value:function(e,t,n){if(void 0===t.tag&&void 0===t.isTextNode||(t=this.create(t)),"object"!=(void 0===e?"undefined":_typeof(e))&&(e=this.select(e)),null!==e&&void 0!==e){var o=e.appendChild(t);return void 0!==n&&(o=e),o}throw e+" cannot be found"}},{key:"appendBefore",value:function(e,t){if(void 0!==t.tag&&(t=this.create(t)),"object"!=(void 0===e?"undefined":_typeof(e))&&(e=this.select(e)),null!==e&&void 0!==e)return e.parentNode.insertBefore(t,e);throw e+" cannot be found"}},{key:"appendAfter",value:function(e,t){if(void 0!==t.tag&&(t=this.create(t)),"object"!=(void 0===e?"undefined":_typeof(e))&&(e=this.select(e)),null!==e&&void 0!==e)return e.parentNode.insertBefore(t,e.nextSibling);throw e+" cannot be found"}},{key:"prepend",value:function(e,t){if(void 0!==t.tag&&(t=this.create(t)),"object"!=(void 0===e?"undefined":_typeof(e))&&(e=this.select(e)),null!==e&&void 0!==e)return 0===e.childNodes.length?this.append(e,t):e.insertBefore(t,e.firstChild);throw e+" cannot be found"}},{key:"replace",value:function(e,t){if(void 0!==t.tag&&(t=this.create(t)),"object"!=(void 0===e?"undefined":_typeof(e))&&(e=this.select(e)),null!==e&&void 0!==e){return e.parentNode.replaceChild(t,e)}throw e+" cannot be found"}},{key:"remove",value:function(e){return"object"!=(void 0===e?"undefined":_typeof(e))&&(e=this.select(e)),null!==e&&void 0!==e&&e.parentNode.removeChild(e)}},{key:"empty",value:function(e){if("object"!=(void 0===e?"undefined":_typeof(e))&&(e=this.select(e)),null!==e&&void 0!==e){for(;e.lastChild;)e.removeChild(e.lastChild);return e}}},{key:"textNode",value:function(e){return this.doc.createTextNode(e)}},{key:"create",value:function(e){var t=null;if(void 0!==e.isTextNode)t=this.textNode(e.content);else{if(this.created.has(e.tag)||this.created.set(e.tag,this.doc.createElement(e.tag)),t=this.created.get(e.tag).cloneNode(),void 0!==e.attr)for(var n in e.attr)if(this.eltEvent.has(n))t.addEventListener(this.eltEvent.get(n),e.attr[n]);else switch(n){case"checked":t.checked=e.attr[n];break;case"className":t.setAttribute("class",e.attr[n]);break;default:t.setAttribute(n,e.attr[n])}if(void 0!==e.innerForce&&(t.innerHTML=e.innerForce),void 0!==e.append)for(var o in e.append)t=this.append(t,e.append[o],!0);void 0!==e.inner&&t.appendChild(this.textNode(e.inner)),void 0!==e.initCallback&&"function"==typeof e.initCallback&&e.initCallback(t)}return t}},{key:"eltFromString",value:function(e){var t=e;try{e=(new Range).createContextualFragment(t)}catch(o){var n=this.doc.createRange();this.doc.createElement("div");n.selectNode(this.doc.getElementsByTagName("div").item(0)),e=n.createContextualFragment(t)}return e}},{key:"reverseCreate",value:function(e){var t={};if("#text"===e.nodeName)t.isTextNode=!0,t.content=e.nodeValue;else{if(t.tag=e.nodeName.toLowerCase(),void 0!==e.attributes&&e.attributes.length>0){t.attr={};for(var n=e.attributes.length-1;n>=0;n--)t.attr[e.attributes.item(n).name]=e.attributes.item(n).value}if(void 0!==e.childNodes&&e.childNodes.length>0){t.append=[];for(var o=0;o<=e.childNodes.length-1;o++)t.append.push(this.reverseCreate(e.childNodes.item(o)))}}return t}},{key:"reverseCreateFromString",value:function(e){return this.reverseCreate(this.eltFromString(e))}}]),e}();module.exports=Jsi;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
